generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email     String  @unique
  name      String  @unique
  password  String
  phone     String?
  avatarURL String  @default("https://www.univ.kiev.ua/img/kobzar.jpg") @map("avatar_url")

  aboutMe   String    @default("") @map("about_me")
  gender    Gender    @default(Unknown)
  birthDate DateTime? @map("birth_date")

  roles Role[] @default([User])

  products Product[] @relation("owner")
  reviews  Review[]  @relation("author")

  orders         Order[]
  favorites      Product[]
  helpfulReviews Review[]

  promoCodes PromoCode[] @relation("owner")
}

enum Gender {
  Male
  Female
  Unknown
}

enum Role {
  User
  Helper
  Admin
  Owner
}

model PromoCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ownerId Int?  @map("owner_id")
  owner   User? @relation("owner", fields: [ownerId], references: [id])

  name String @unique

  expiresAt       DateTime @map("expires_at")
  activationLimit Int      @default(30) @map("activation_limit")

  discountPercent Int     @default(5) @map("discount_percent")
  orders          Order[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ownerId Int  @map("owner_id")
  owner   User @relation("owner", fields: [ownerId], references: [id])

  name        String   @unique
  slug        String   @unique
  description String
  price       Float
  images      String[]
  quantity    Int
  sold        Int

  users       User[]
  order_items OrderItem[]
  reviews     Review[]
  categories  Category[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  Product Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  productId Int?     @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])

  helpful User[]

  userId Int?  @map("user_id")
  user   User? @relation("author", fields: [userId], references: [id])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status OrderStatus @default(PENDING)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  promoCodeId Int?       @map("promo_code_id")
  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Float

  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [id])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
